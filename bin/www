#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config()
const app = require('../app');
const debug = require('debug')('tutor:server');
const database = require("../models/database")
const http = require('http');

const stripe = require('stripe')('sk_test_51M1zZZKgvv1eRC7rBgnByDQdn91Zs2vddghqvN3VjEO88sEVuZPttsXIM4AzWZVzC9tqEWqnWpHKXLAYJ9JIfmvD006mwpuT8W', {apiVersion: "2022-08-01"});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

async function onListening() {
  try {
    await database.initialise();
    const customer = await stripe.customers.create({
      email: 'adam.zachary.saher@gmail.com'
    });
    console.log("stripe customer id:", customer.id)
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
  } catch (e) {
    console.log(e.message)
  }

}
